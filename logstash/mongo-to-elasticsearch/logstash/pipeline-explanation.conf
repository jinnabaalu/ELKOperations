input {
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/drivers/mongojdbc4.9.0.jar"
    jdbc_driver_class => "Java::com.wisecoders.dbschema.mongodb.JdbcDriver"
    jdbc_connection_string => "jdbc:mongodb://mongodb:27017/aloha?authSource=admin"
    jdbc_user => ""  # Add username if required
    jdbc_password => ""  # Add password if required
    schedule => "* * * * *"  # Run every minute (modify as per your schedule)
    statement => '
      db.movies.aggregate([
        {
          $addFields: {
            movieId: { $toString: "$_id" },  // Convert MongoDB ObjectId to string for Elasticsearch
            profit: {
              total: { $add: ["$boxOffice.profit.domestic", "$boxOffice.profit.international"] }
            },
            releaseDate: {
              $ifNull: [
                { $dateFromString: { dateString: "$releaseDate" } },
                null
              ]
            },
            director: {
              directorId: { $toString: "$director._id" },  // Convert director ObjectId to string
              name: "$director.name",
              age: "$director.age",
              awardsWon: "$director.awardsWon"
            },
            cast: {
              $map: {
                input: "$cast",  // Iterate over the cast array
                as: "member",
                in: {
                  name: "$$member.name",
                  role: "$$member.role",
                  age: "$$member.age"
                }
              }
            },
            genres: "$genres"  // Map genres directly (basic object mapping example)
          }
        },
        {
          $project: {
            _id: 0,  # Exclude the MongoDB ObjectId
            movieId: 1,  # Include transformed movie ID
            title: 1,
            releaseYear: 1,
            rating: 1,
            isAvailable: 1,
            genres: 1,
            releaseDate: 1,
            director: 1,
            cast: 1,
            boxOffice: 1,
            profit: 1
          }
        }
      ])
    '
  }
}

filter {
  mutate {
    # Add metadata field for use as the Elasticsearch document ID
    add_field => { "[@metadata][document_id]" => "%{[movieId]}" }
  }

  # Optionally clean up or manipulate fields if necessary
  mutate {
    remove_field => ["@version", "tags"]  # Remove unnecessary fields
  }
}

output {
  elasticsearch {
    hosts => ["https://es01:9200"]  # Elasticsearch endpoint
    index => "movies"  # Target index in Elasticsearch
    document_id => "%{[@metadata][document_id]}"  # Use movieId as the document ID
    user => "elastic"  # Username for Elasticsearch
    password => "elastic123"  # Password for Elasticsearch
    data_stream => auto  # Automatically configure as a data stream
    ssl => true
    ssl_certificate_verification => false
    action => "index"  # Index the document
  }

  # Optionally output to stdout for debugging purposes
  stdout {
    codec => json_lines
  }
}
